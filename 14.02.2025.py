from fastapi import FastAPI
from fastapi.responses import HTMLResponse, StreamingResponse
import asyncio
import json
import random

app = FastAPI()

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ (True - –æ–Ω–ª–∞–π–Ω, False - –æ—Ñ–ª–∞–π–Ω)
users = {
    "user1": True,
    "user2": False,
    "user3": True,
    "user4": False,
    "user5": True
}

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/", response_class=HTMLResponse)
async def index():
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</title>
        <style>
            .online { color: green; }
            .offline { color: red; }
        </style>
    </head>
    <body>
        <h1>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
        <ul id="userList"></ul>

        <script>
            const eventSource = new EventSource("/sse");

            eventSource.onmessage = function(event) {
                const users = JSON.parse(event.data);
                let userListHTML = "";
                for (let user in users) {
                    let statusClass = users[user] ? "online" : "offline";
                    userListHTML += `<li class="\${statusClass}">\${user} - \${users[user] ? "–û–Ω–ª–∞–π–Ω üü¢" : "–û—Ñ–ª–∞–π–Ω üî¥"}</li>`;
                }
                document.getElementById("userList").innerHTML = userListHTML;
            };
        </script>
    </body>
    </html>
    """

# SSE-–ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/sse")
async def sse():
    async def event_stream():
        while True:
            # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–∞–Ω–¥–æ–º–Ω–æ)
            for user in users.keys():
                users[user] = random.choice([True, False])
            yield f"data: {json.dumps(users)}\n\n"
            await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return StreamingResponse(event_stream(), media_type="text/event-stream")
